{$assertions on}

procedure TestParseObject;
var
  json: TJSONParser;
begin
  json := new TJSONParser;
  json.Parse("{str: 'abc', int: 123, float: 1.23, bool: true, arr: [], obj: {}}");
  Assert(json.Count = 6);
  Assert(json.Typ = EJSONType.OBJ);
  Assert(json.Item[0].Typ = EJSONType.STR);
  Assert(json.Item[1].Typ = EJSONType.INT);
  Assert(json.Item[2].Typ = EJSONType.FLOAT);
  Assert(json.Item[3].Typ = EJSONType.BOOL);
  Assert(json.Item[4].Typ = EJSONType.ARR);
  Assert(json.Item[5].Typ = EJSONType.OBJ);
  Assert(json.Key[0] = 'str');
  Assert(json.Key[1] = 'int');
  Assert(json.Key[2] = 'float');
  Assert(json.Key[3] = 'bool');
  Assert(json.Key[4] = 'arr');
  Assert(json.Key[5] = 'obj');
end;

procedure TestBuildObject;
var
  json: TJSONItem;
begin
  json := new TJSONObject;
  json.AddString('str', 'abc');
  json.AddInt('int', 123);
  json.AddFloat('float', 1.23);
  json.AddBool('bool', True);
  json.AddArray('arr', new TJSONArray());
  json.AddObject('obj', new TJSONObject());
  Assert(json.Count = 6);
  Assert(json.Typ = EJSONType.OBJ);
  Assert(json.Item[0].Typ = EJSONType.STR);
  Assert(json.Item[1].Typ = EJSONType.INT);
  Assert(json.Item[2].Typ = EJSONType.FLOAT);
  Assert(json.Item[3].Typ = EJSONType.BOOL);
  Assert(json.Item[4].Typ = EJSONType.ARR);
  Assert(json.Item[5].Typ = EJSONType.OBJ);
  Assert(json.Key[0] = 'str');
  Assert(json.Key[1] = 'int');
  Assert(json.Key[2] = 'float');
  Assert(json.Key[3] = 'bool');
  Assert(json.Key[4] = 'arr');
  Assert(json.Key[5] = 'obj');
  Assert(json.Format() =
    '{'                                     + LINE_SEP +
    '  "str" : "abc",'                      + LINE_SEP +
    '  "int" : 123,'                        + LINE_SEP +
    '  "float" : 1.2300000000000000E+000,'  + LINE_SEP +
    '  "bool" : true,'                      + LINE_SEP +
    '  "arr" : ['                           + LINE_SEP +
    '  ],'                                  + LINE_SEP +
    '  "obj" : {}'                          + LINE_SEP +
    '}'
  );

  Assert(json.key[0] = 'str');
  Assert(json.key[4] = 'arr');
  json.Key[0] := 'str_but_renamed';
  json.Key[4] := 'arr_but_renamed';
  Assert(json.key[0] = 'str_but_renamed');
  Assert(json.key[4] = 'arr_but_renamed');
end;

procedure TestParseArray;
var
  json: TJSONParser;
begin
  json := new TJSONParser;
  json.Parse("['abc', 123, 1.23, true, [], {}]");
  Assert(json.Count = 6);
  Assert(json.Typ = EJSONType.ARR);
  Assert(json.Item[0].Typ = EJSONType.STR);
  Assert(json.Item[1].Typ = EJSONType.INT);
  Assert(json.Item[2].Typ = EJSONType.FLOAT);
  Assert(json.Item[3].Typ = EJSONType.BOOL);
  Assert(json.Item[4].Typ = EJSONType.ARR);
  Assert(json.Item[5].Typ = EJSONType.OBJ);
end;

procedure TestBuildArray;
var
  json: TJSONItem;
begin
  json := new TJSONArray;
  json.AddString('', 'abc');
  json.AddInt('', 123);
  json.AddFloat('', 1.23);
  json.AddBool('', True);
  json.AddArray('', new TJSONArray());
  json.AddObject('', new TJSONObject());
  Assert(json.Count = 6);
  Assert(json.Typ = EJSONType.ARR);
  Assert(json.Item[0].Typ = EJSONType.STR);
  Assert(json.Item[1].Typ = EJSONType.INT);
  Assert(json.Item[2].Typ = EJSONType.FLOAT);
  Assert(json.Item[3].Typ = EJSONType.BOOL);
  Assert(json.Item[4].Typ = EJSONType.ARR);
  Assert(json.Item[5].Typ = EJSONType.OBJ);
  Assert(json.Format() =
    '['                           + LINE_SEP +
    '  "abc",'                    + LINE_SEP +
    '  123,'                      + LINE_SEP +
    '  1.2300000000000000E+000,'  + LINE_SEP +
    '  true,'                     + LINE_SEP +
    '  ['                         + LINE_SEP +
    '  ],'                        + LINE_SEP +
    '  {}'                        + LINE_SEP +
    ']'
  );
end;

procedure TestObjectHas;
var
  json: TJSONParser;
begin
  json := new TJSONParser;
  json.Parse("{str: 'abc', int: 123, float: 1.23, bool: true, arr: [], obj: {}}");
  Assert(json.Has('str') = True);
  Assert(json.Has('strs') = False);
  Assert(json.Has('str', EJSONType.STR) = True);
  Assert(json.Has('str', EJSONType.INT) = False);
  Assert(json.Has('float', EJSONType.FLOAT) = True);
  Assert(json.Has('float', EJSONType.INT) = False);
end;

procedure TestObjectGet;
var
  json: TJSONParser;
  s: String;
  i: Int64;
  f: Double;
  b: Boolean;
  a: TJSONItem;
  o: TJSONItem;
begin
  json := new TJSONParser;
  json.Parse("{str: 'abc', int: 123, float: 1.23, bool: true, arr: [], obj: {}}");
  Assert(json.GetString('str', s));
  Assert(s = 'abc');
  Assert(json.GetInt('int', i));
  Assert(i = 123);
  Assert(json.GetFloat('float', f));
  Assert(Abs(f - 1.23) < 0.001);
  Assert(json.GetBool('bool', b));
  Assert(b = True);
  Assert(json.GetArray('arr', a));
  Assert(a <> nil);
  Assert(json.GetObject('obj', o));
  Assert(o <> nil);

  Assert(json.GetInt('str', i) = False);
  Assert(json.GetString('int', s) = False);
  Assert(json.GetFloat('int', f) = False);
  Assert(json.GetBool('int', b) = False);
  Assert(json.GetArray('int', a) = False);
  Assert(json.GetObject('int', o) = False);
end;

procedure TestFindPath;
var
  json: TJSONParser;
begin
  json := new TJSONParser;
  json.Parse("{person: {age: 1, names: ['foo', 'bar']} }");
  Assert(json.FindPath('person.names[1]') <> nil);
  Assert(json.FindPath('person.names[1]').AsString = 'bar');
end;

procedure TestClone;
var
  json: TJSONParser;
  jsonArr: TJSONItem;
begin
  json := new TJSONParser;
  json.Parse("{str: 'abc', int: 123, float: 1.23, bool: true, arr: [], obj: {}}");
  Assert(json.Format() =
    '{'                                    + LINE_SEP +
    '  "str" : "abc",'                     + LINE_SEP +
    '  "int" : 123,'                       + LINE_SEP +
    '  "float" : 1.2300000000000000E+000,' + LINE_SEP +
    '  "bool" : true,'                     + LINE_SEP +
    '  "arr" : ['                          + LINE_SEP +
    '  ],'                                 + LINE_SEP +
    '  "obj" : {}'                         + LINE_SEP +
    '}'
  );

  jsonArr := new TJSONArray;
  jsonArr.Add('', json);
  jsonArr.Add('', json.Clone);
  jsonArr.Add('', json.Item['bool'].Clone);
  Assert(jsonArr.Count = 3);
  Assert(jsonArr.Item[0].Format() = json.Format());
  Assert(jsonArr.Item[1].Format() = json.Format());
  Assert(jsonArr.Item[2].Format() = 'true');
end;

procedure TestIndexingObject;
var
  json: TJSONParser;
  i: Integer;
begin
  json := new TJSONParser;
  json.Parse("{a: 1, b: 2, c: 3, d: 4}");
  Assert(json.Count = 4);
  for i:=0 to json.Count-1 do
    Assert(json.Item[i].AsInt = i+1);
  Assert(json.Item['a'].AsInt = 1);
  Assert(json.Item['b'].AsInt = 2);
  Assert(json.Item['c'].AsInt = 3);
  Assert(json.Item['d'].AsInt = 4);
end;

procedure TestIndexingArray;
var
  json: TJSONParser;
  i: Integer;
begin
  json := new TJSONParser;
  json.Parse("[1,2,3,4,5,6]");
  Assert(json.Count = 6);
  for i:=0 to json.Count-1 do
    Assert(json.Item[i].AsInt = i+1);
end;

procedure TestSaveLoad;
var
  json: TJSONParser;
begin
  json := new TJSONParser;
  json.Parse("{str: 'abc', int: 123, float: 1.23, bool: true, arr: [], obj: {}}");
  json.Save(SimbaEnv.TempPath + 'test.json');
  json.Clear();
  json.Load(SimbaEnv.TempPath + 'test.json');
  Assert(json.Format() =
    '{'                                     + LINE_SEP +
    '  "str" : "abc",'                      + LINE_SEP +
    '  "int" : 123,'                        + LINE_SEP +
    '  "float" : 1.2300000000000000E+000,'  + LINE_SEP +
    '  "bool" : true,'                      + LINE_SEP +
    '  "arr" : ['                           + LINE_SEP +
    '  ],'                                  + LINE_SEP +
    '  "obj" : {}'                          + LINE_SEP +
    '}'
  );
end;

begin
  TestParseObject();
  TestBuildObject();
  TestParseArray();
  TestBuildArray();

  TestObjectHas();
  TestObjectGet();

  TestFindPath();
  TestClone();

  TestIndexingObject();
  TestIndexingArray();

  TestSaveLoad();
end;
